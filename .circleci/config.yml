version: 2
jobs:
  build:
    machine: # executor type
      image: ubuntu-2204:2024.05.1

    steps:
      - checkout

      - run:
          name: Set environment variables
          command: |
            echo 'export VERSION=$(jq -r .version package.json)' >> $BASH_ENV
            echo 'export PKG_NAME=resiOS' >> $BASH_ENV
            echo 'export MAINTAINER_NAME="Yann Stepienik"' >> $BASH_ENV
            echo 'export MAINTAINER_EMAIL="cosmoscloudsup@gmail.com"' >> $BASH_ENV
            source $BASH_ENV

      - run:
          name: Install GitHub CLI
          command: |
            type -p curl >/dev/null || (sudo apt update && sudo apt install curl -y)
            curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg \
            && sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg \
            && echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null \
            && sudo apt update \
            && sudo apt install gh -y
            
      - run:
          name: Setup docker and buildx
          command: docker buildx create --use

      - run:
          name: install dependencies
          command: sudo apt-get install bash curl

      - run:
          name: download Go
          command: wget https://golang.org/dl/go1.23.2.linux-amd64.tar.gz

      - run:
          name: install Go
          command: sudo rm -rf /usr/local/go && sudo tar -C /usr/local -xzf go1.23.2.linux-amd64.tar.gz

      - run:
          name: set Go path
          command: echo 'export PATH=$PATH:/usr/local/go/bin' >> $BASH_ENV

      - run: |
          echo 'export NVM_DIR="/opt/circleci/.nvm"' >> $BASH_ENV
          echo ' [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"' >> $BASH_ENV

      - run: |
          node -v

      - run: |
          nvm install v16
          node -v
          nvm alias default v16

      - run: |
          node -v

      - run: docker login -u $DOCKER_LOGIN -p $DOCKER_PASSWORD

      - run:
          name: Install dependencies
          command: npm install

      - run:
          name: Download GeoLite2-Country database
          command: |
            curl -s -L "https://download.maxmind.com/app/geoip_download?edition_id=GeoLite2-Country&license_key=$MAX_TOKEN&suffix=tar.gz" -o GeoLite2-Country.tar.gz
            tar -xzf GeoLite2-Country.tar.gz --strip-components 1 --wildcards "*.mmdb"

      - run:
          name: Download and Extract ARM Nebula Binary
          command: |
            curl -LO https://github.com/slackhq/nebula/releases/download/v1.8.2/nebula-linux-arm64.tar.gz
            tar -xzvf nebula-linux-arm64.tar.gz

      - run:
          name: Rename ARM Nebula Binary
          command: |
            mv nebula nebula-arm
            mv nebula-cert nebula-arm-cert

      - run:
          name: Download and Extract Nebula Binary
          command: |
            curl -LO https://github.com/slackhq/nebula/releases/download/v1.8.2/nebula-linux-amd64.tar.gz
            tar -xzvf nebula-linux-amd64.tar.gz

      - run:
          name: Build UI
          command: npm run client-build

      - run:
          name: Build and publish dockerfiles
          command: sh docker.sh

      - run:
          name: Prepare package structure
          command: |
            mkdir -p ${PKG_NAME}-${VERSION}
            cp -r build/* ${PKG_NAME}-${VERSION}/
            rm ${PKG_NAME}-${VERSION}/cosmos-launcher-arm64
            rm ${PKG_NAME}-${VERSION}/cosmos-arm64
            rm ${PKG_NAME}-${VERSION}/nebula-arm
            rm ${PKG_NAME}-${VERSION}/nebula-arm-cert

      - run:
          name: Prepare ARM64 package structure
          command: |
            mkdir -p ${PKG_NAME}-${VERSION}-arm64
            cp -r build/* ${PKG_NAME}-${VERSION}-arm64/
            mv ${PKG_NAME}-${VERSION}-arm64/cosmos-arm64 ${PKG_NAME}-${VERSION}-arm64/cosmos
            mv ${PKG_NAME}-${VERSION}-arm64/cosmos-launcher-arm64 ${PKG_NAME}-${VERSION}-arm64/cosmos-launcher

      - run:
          name: Create .zip packages
          command: |
            zip -r ${PKG_NAME}-${VERSION}-amd64.zip ${PKG_NAME}-${VERSION}
            zip -r ${PKG_NAME}-${VERSION}-arm64.zip ${PKG_NAME}-${VERSION}-arm64

      - run:
          name: Generate MD5 hashes
          command: |
            md5sum ${PKG_NAME}-${VERSION}-amd64.zip > ${PKG_NAME}-${VERSION}-amd64.zip.md5
            md5sum ${PKG_NAME}-${VERSION}-arm64.zip > ${PKG_NAME}-${VERSION}-arm64.zip.md5

      - run:
          name: Create GitHub Release
          command: |
            VERSION=$(jq -r .version package.json)
            PKG_NAME=resiOS
           
            # Get current branch name
            BRANCH_NAME=$(git rev-parse --abbrev-ref HEAD)
           
            gh repo set-default aseracorp/resiOS

            if [ "$BRANCH_NAME" = "master" ] || [ "$BRANCH_NAME" = "main" ]; then
              gh release create v$VERSION \
                ${PKG_NAME}-${VERSION}-amd64.zip \
                ${PKG_NAME}-${VERSION}-amd64.zip.md5 \
                ${PKG_NAME}-${VERSION}-arm64.zip \
                ${PKG_NAME}-${VERSION}-arm64.zip.md5 \
                --title "Release $VERSION" \
                --notes "Release version $VERSION for x86_64 and ARM64 architectures"
            else
              gh release create v$VERSION \
                ${PKG_NAME}-${VERSION}-amd64.zip \
                ${PKG_NAME}-${VERSION}-amd64.zip.md5 \
                ${PKG_NAME}-${VERSION}-arm64.zip \
                ${PKG_NAME}-${VERSION}-arm64.zip.md5 \
                --prerelease \
                --title "Beta Release $VERSION" \
                --notes "Beta release version $VERSION for x86_64 and ARM64 architectures from branch $BRANCH_NAME"
            fi

workflows:
  version: 2
  build-all:
    jobs:
      - build:
          filters:
            branches:
              only:
                - master
                - unstable
